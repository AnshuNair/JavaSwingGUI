package ws4;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Arrays;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;

public class StudentInfoWriter extends JFrame {

	private static final long serialVersionUID = 1L;

	private final JTextField tfFirstName;
	private final JTextField tfLastName;
	private final JTextField tfStudentId;

	private final JLabel lFirstName;
	private final JLabel lLastName;
	private final JLabel lStudentId;
	private final JLabel lCourse;

	private final JButton saveButton;
	private final JTextArea taCourse;

	private static int studentId = 0;
	private static int studentNum = 0;
	private static String firstName = "";
	private static String lastName = "";
	private static String[] courseArray = new String[20];

	private static Student student = new Student();

	private static boolean correctInput = true;
	private static boolean studentAdded = false;

	static ArrayList<Student> students = new ArrayList<Student>();
	static ArrayList<String> courses = new ArrayList<String>();

	public StudentInfoWriter() {
		super("Student Creator");
		setLayout(new FlowLayout());

		lStudentId = new JLabel("Student ID: ");
		add(lStudentId);
		tfStudentId = new JTextField(15);
		tfStudentId.setHorizontalAlignment(SwingConstants.LEFT);
		add(tfStudentId);

		JPanel p = new JPanel();
		p.setBorder(new EmptyBorder(10, 10, 10, 10));
		add(p);

		lFirstName = new JLabel("First Name: ");
		add(lFirstName);
		tfFirstName = new JTextField(15);
		tfFirstName.setHorizontalAlignment(SwingConstants.LEFT);
		add(tfFirstName);

		JPanel q = new JPanel();
		q.setBorder(new EmptyBorder(10, 10, 10, 10));
		add(q);

		lLastName = new JLabel("Last Name: ");
		add(lLastName);
		tfLastName = new JTextField(15);
		tfLastName.setHorizontalAlignment(SwingConstants.LEFT);
		add(tfLastName);

		JPanel r = new JPanel();
		r.setBorder(new EmptyBorder(10, 10, 20, 10));
		add(r);

		lCourse = new JLabel("Course Names: ");
		add(lCourse);
		taCourse = new JTextArea(null, 10, 15);
		add(taCourse);
		add(new JScrollPane(taCourse));

		JPanel s = new JPanel();
		s.setBorder(new EmptyBorder(10, 10, 150, 10));
		add(s);

		saveButton = new JButton("Save Student");
		saveButton.setVerticalAlignment(SwingConstants.BOTTOM);
		add(saveButton);

//		ButtonHandler handler = new ButtonHandler();
//		saveButton.addActionListener(handler);
//		tfStudentId.addActionListener(handler);
//		tfFirstName.addActionListener(handler);
//		tfLastName.addActionListener(handler);
	}

	private class ButtonHandler implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent event) {
			try {
				if (tfStudentId.getText() == null) {
					JOptionPane.showMessageDialog(null, "Student must have an ID.", "User Aborted",
							JOptionPane.PLAIN_MESSAGE);
					correctInput = false;
					throw new IllegalArgumentException();
				}
				studentId = Integer.parseInt(tfStudentId.getText());
				System.out.println(studentId);
			} catch (Exception e) {
				System.err.println(e);
			}

			try {
				if (tfFirstName.getText() == null) {
					JOptionPane.showMessageDialog(null, "Student must have a first name.", "User Aborted",
							JOptionPane.PLAIN_MESSAGE);
					correctInput = false;
					throw new IllegalArgumentException();
				}
				firstName = tfFirstName.getText();
				System.out.println(firstName);
			} catch (Exception e) {
				System.err.println(e);
			}

			try {
				if (tfLastName.getText() == null) {
					JOptionPane.showMessageDialog(null, "Student must have a last name.", "User Aborted",
							JOptionPane.PLAIN_MESSAGE);
					correctInput = false;
					throw new IllegalArgumentException();
				}
				lastName = tfLastName.getText();
				System.out.println(lastName);
			} catch (Exception e) {
				System.err.println(e);
			}

			try {
				if (taCourse.getText() == null) {
					JOptionPane.showMessageDialog(null, "Student must be enrolled in at least one course.",
							"User Aborted", JOptionPane.PLAIN_MESSAGE);
					correctInput = false;
					throw new IllegalArgumentException();
				}
				courseArray = taCourse.getText().split("\\r?\\n");
				courses = new ArrayList<>(Arrays.asList(courseArray));
				for (int i = 0; i < courses.size(); i++) {
					System.out.println(courses.get(i));
				}
			} catch (Exception e) {
				System.err.println(e);
			}

			if (correctInput) {
				student.setFirstName(firstName);
				student.setLastName(lastName);
				student.setStdID(studentId);
				student.setCourses(courses);
				students.add(student);
				studentNum++;
			}
			studentAdded = true;
			correctInput = false;
		}
	}

	static void createFrame() {
		StudentInfoWriter stdCreator = new StudentInfoWriter();
		stdCreator.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		stdCreator.setSize(300, 500);
		stdCreator.setVisible(true);
		stdCreator.setResizable(false);
	}

	public static void main(String[] args) {

		createFrame();

		boolean studentFlag = true;

		while (studentFlag) {
			if (studentAdded) {
				studentAdded = false;
				String addChoice = JOptionPane
						.showInputDialog("Please enter y/Y if you wish to add another student. If not, press cancel.");
				if (addChoice.equals("y") || addChoice.equals("Y")) {
					studentFlag = true;
					createFrame();
				} else if (addChoice == null || !(addChoice.equals("y") || addChoice.equals("Y")))
					studentFlag = false;
			}
		}

		JOptionPane.showMessageDialog(null,
				"Added " + studentNum + " student(s). Press OK to write student object(s) to file 'student.txt'",
				"Student Creation Complete", JOptionPane.PLAIN_MESSAGE);

		try {
			ObjectOutputStream os = new ObjectOutputStream(new FileOutputStream("student.txt"));
			os.writeObject(students);
			os.flush();
			os.close();
			JOptionPane.showMessageDialog(null, "Success!", "Write to file", JOptionPane.PLAIN_MESSAGE);
		} catch (Throwable e) {
			System.err.println(e);
			e.printStackTrace();
		}
	}
}
